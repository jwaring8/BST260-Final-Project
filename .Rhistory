username = "bst262user", password = "d7@yM2Z8!a")
install.packages("RMySQL")
#d <- load ("/n/home04/bst262u1823/breastcohort.RData")
con <- src_mysql(dbname = "bst262health", host = "db-bst262",
username = "bst262user", password = "d7@yM2Z8!a")
breastcohort_db <- tbl(con, "breastcohort")
d <- load("/Users/ericamoreira/Desktop/Erica_Files/Classes/BST262/breastcohort.RData")
d
as.list(split(breastcohort, breastcohort$FamID))
split(fam_ids)
?split
split(fam_ids, fam_ids)
library(dplyr)
library(dbplyr)
library(BayesMendel)
library(ggplot2)
library(reticulate)
d <- load("/Users/ericamoreira/Desktop/Erica_Files/Classes/BST262/breastcohort.RData")
?brcapro
# set seed
set.seed(52632)
# taking a random sample of 200 families (each of which has a proband)
proband_sample <- sample(unique(breastcohort$FamID), 200, replace=FALSE)
proband_sample
proband_sample <- sample(unique(breastcohort$FamID), 200, replace=FALSE)
# subsetting all of the data for those 200 family IDs
proband_sample_data <- proband_sample %>% filter(FamID %in% proband_sample)
# subsetting all of the data for those 200 family IDs
proband_sample_data <- breastcohort %>% filter(FamID %in% proband_sample)
proband_sample_data
# splitting the data for parallelization
split_data<-split(proband_sample_data, proband_sample_data$FamID)
split_data
system.time(output <- lapply(split_data, brcapro, print =FALSE, counselee.id=50, params=brcaparams(age.by = 10))) ## apply function to all the families and measure the system time
output[1]@predictions
output[[1]]@predictions
predictions
output@predictions
View(output)
View(output)
str(output)
class(output)
getrisk<- function(i) {
x<-output[[i]]@predictions$`Breast Ca Risk`[1]
return(x)
}
rep(NA, length(splitData))
#
vectorPred<-rep(NA, length(split_data))
rep(NA, length(split_data))
# creating empty vector of length 200
vectorPred<-rep(NA, 200)
# creating empty vector of length 200
vectorPred<-rep(NA, length(split_data))
for (i in 1:length(splitData)) {
vectorPred[i]<-getrisk(i)
}
# filling the vector with the Breast Cancer Risk predictions
for (i in 1:length(split_data)) {
vectorPred[i]<-getrisk(i)
}
unique(mysampledata$FamID)
FamID <- unique(proband_sample_data$FamID) ## vector of all the family ids in my sample
unique(proband_sample_data$FamID)
unique(proband_sample_data$FamID)
unique(proband_sample_data$FamID)
unique(proband_sample_data$FamID)
unique(proband_sample_data$FamID)
unique(proband_sample_data$FamID)
unique(proband_sample_data$FamID)
unique(proband_sample_data$FamID)
unique(proband_sample_data$FamID)
FamID, vectorPred
FamID
FamID
FamID
FamID
FamID
FamID
vectorPred
vectorPred
vectorPred
vectorPred
vectorPred
vectorPred
predictions <- data.frame(unique(proband_sample_data$FamID), vectorPred) ## data frame of predictions and family ids
predictions
# creating a dataframe with original data and predictions
proband_sample_data <- left_join(proband_sample_data,id_pred) ## left join them to have a data frame with all the information
# data frame of predictions and family ids
id_pred <- data.frame(unique(proband_sample_data$FamID), vectorPred)
# creating a dataframe with original data and predictions
proband_sample_data <- left_join(proband_sample_data,id_pred) ## left join them to have a data frame with all the information
# data frame of predictions and family ids
id_pred <- data.frame(unique(proband_sample_data$FamID), vectorPred)
# creating a dataframe with original data and predictions
proband_sample_data <- left_join(proband_sample_data, id_pred) ## left join them to have a data frame with all the information
id_pred
# data frame of predictions and family ids
id_pred <- data.frame(FamID, vectorPred)
# creating a dataframe with original data and predictions
proband_sample_data <- left_join(proband_sample_data, id_pred) ## left join them to have a data frame with all the information
# family IDs in sample
FamID <- unique(mysampledata$FamID)
# family IDs in sample
FamID <- unique(proband_sample_data$FamID)
# data frame of predictions and family ids
id_pred <- data.frame(FamID, vectorPred)
# creating a dataframe with original data and predictions
proband_sample_data <- left_join(proband_sample_data, id_pred) ## left join them to have a data frame with all the information
proband_sample_data
desc(proband_sample_data)
summar(proband_sample_data)
summary(proband_sample_data)
# apply the bcrapro function to the 200 probands and measure system time
system.time(output <- lapply(split_data, brcapro, print=FALSE, counselee.id=50, params=brcaparams(age.by = 10)))
# user = 22.738
# system = 2.098
# elapsed = 24.891
# function to pull Breast Cancer Risk out of s4 object of class Bayes Mendel
getrisk<- function(i) {
x<-output[[i]]@predictions$`Breast Ca Risk`[1]
return(x)
}
# creating empty vector of length 200
Pred<-rep(NA, length(split_data))
# filling the vector with the Breast Cancer Risk predictions
for (i in 1:length(split_data)) {
Pred[i]<-getrisk(i)
}
# family IDs in sample
FamID <- unique(proband_sample_data$FamID)
# data frame of predictions and family ids
id_pred <- data.frame(FamID, Pred)
# creating a dataframe with original data and predictions
proband_sample_data <- left_join(proband_sample_data, id_pred) ## left join them to have a data frame with all the information
proband_sample_data
# creating a dataframe with original data and predictions (and limiting to only the probands)
final_proband_data <- left_join(proband_sample_data, id_pred) %>% filter(ID == 50) ## left join them to have a data frame with all the information
final_proband_data
summary(final_proband_data)
hist(final_proband_data)
hist(final_proband_data$Pred)
stopCluster(cl)
library(dplyr)
library(dbplyr)
library(BayesMendel)
library(parallel)
d <- load ("/n/home04/bst262u1823/breastcohort.RData")
# set seed
set.seed(52632)
# taking a random sample of 200 family IDs (each of which has a proband)
proband_sample <- sample(unique(breastcohort$FamID), 200, replace=FALSE)
# subsetting all of the data for those 200 family IDs
proband_sample_data <- breastcohort %>% filter(FamID %in% proband_sample)
split_data<-split(proband_sample_data, proband_sample_data$FamID)
cl <-makeCluster(detectCores(), type="FORK")
clusterSplit <-clusterSplit(cl,seq_along(split_data))
system.time(splitData2<-parLapply(cl, split_data,  brcapro, print = FALSE, counselee.id=50, params=brcaparams(age.by = 10)))
stopCluster(cl)
# Saving on object in RData format
#save(Relationships, file = "Relationships.RData")
d <- load ("/n/home04/bst262u1823/breastcohort.RData")
d <- load("/Users/ericamoreira/Desktop/Erica_Files/Classes/BST262/breastcohort.RData")
# set seed
set.seed(52632)
# taking a random sample of 200 family IDs (each of which has a proband)
proband_sample <- sample(unique(breastcohort$FamID), 200, replace=FALSE)
# subsetting all of the data for those 200 family IDs
proband_sample_data <- breastcohort %>% filter(FamID %in% proband_sample)
split_data<-split(proband_sample_data, proband_sample_data$FamID)
cl <-makeCluster(detectCores(), type="FORK")
clusterSplit <-clusterSplit(cl,seq_along(split_data))
system.time(splitData2<-parLapply(cl, split_data,  brcapro, print = FALSE, counselee.id=50, params=brcaparams(age.by = 10)))
stopCluster(cl)
# Saving on object in RData format
#save(Relationships, file = "Relationships.RData")
View(split_data)
View(splitData2)
splitData2<-parLapply(cl, split_data,  brcapro, print = FALSE, counselee.id=50, params=brcaparams(age.by = 10))
cl <-makeCluster(detectCores(), type="FORK")
clusterSplit <-clusterSplit(cl,seq_along(split_data))
splitData2<-parLapply(cl, split_data,  brcapro, print = FALSE, counselee.id=50, params=brcaparams(age.by = 10))
getrisk<- function(i) {
x<-output[[i]]@predictions$`Breast Ca Risk`[1]
return(x)
}
# creating empty vector of length 200
Pred<-rep(NA, length(split_data))
for (i in 1:length(split_data)) {
Pred[i]<-getrisk(i)
}
# family IDs in sample
FamID <- unique(proband_sample_data$FamID)
getrisk<- function(i) {
x<-output[[i]]@predictions$`Breast Ca Risk`[1]
return(x)
}
# creating empty vector of length 200
Pred<-rep(NA, length(split_data))
# filling the vector with the Breast Cancer Risk predictions
for (i in 1:length(split_data)) {
Pred[i]<-getrisk(i)
}
getrisk<- function(i) {
x<-output[[i]]@predictions$`Breast Ca Risk`[1]
return(x)
}
getrisk<- function(i) {
x <- output[[i]]@predictions$`Breast Ca Risk`[1]
return(x)
}
# creating empty vector of length 200
Pred<-rep(NA, length(split_data))
# creating empty vector of length 200
Pred <- rep(NA, length(split_data))
for (i in 1:length(split_data)) {
Pred[i]<-getrisk(i)
}
cl <-makeCluster(detectCores(), type="FORK")
clusterSplit <- clusterSplit(cl,seq_along(split_data))
output <- parLapply(cl, split_data,  brcapro, print = FALSE, counselee.id=50, params=brcaparams(age.by = 10))
stopCluster(cl)
getrisk<- function(i) {
x <- output[[i]]@predictions$`Breast Ca Risk`[1]
return(x)
}
# creating empty vector of length 200
Pred <- rep(NA, length(split_data))
# filling the vector with the Breast Cancer Risk predictions
for (i in 1:length(split_data)) {
Pred[i]<-getrisk(i)
}
FamID <- unique(proband_sample_data$FamID)
# data frame of predictions and family ids
id_pred <- data.frame(FamID, Pred)
# creating a dataframe with original data and predictions (and limiting to only the probands)
final_proband_data <- left_join(proband_sample_data, id_pred) %>% filter(ID == 50) ## left join them to have a data frame with all the information
final_proband_data
library(dplyr)
library(dbplyr)
library(BayesMendel)
library(parallel)
d <- load ("/n/home04/bst262u1823/breastcohort.RData")
# set seed
set.seed(52632)
# taking a random sample of 200 family IDs (each of which has a proband)
proband_sample <- sample(unique(breastcohort$FamID), 200, replace=FALSE)
# subsetting all of the data for those 200 family IDs
proband_sample_data <- breastcohort %>% filter(FamID %in% proband_sample)
split_data <- split(proband_sample_data, proband_sample_data$FamID)
cl <-makeCluster(detectCores(), type="FORK")
clusterSplit <- clusterSplit(cl,seq_along(split_data))
output <- parLapply(cl, split_data,  brcapro, print = FALSE, counselee.id=50, params=brcaparams(age.by = 10))
stopCluster(cl)
# function to pull Breast Cancer Risk out of s4 object of class Bayes Mendel
getrisk<- function(i) {
x <- output[[i]]@predictions$`Breast Ca Risk`[1]
return(x)
}
# creating empty vector of length 200
Pred <- rep(NA, length(split_data))
# filling the vector with the Breast Cancer Risk predictions
for (i in 1:length(split_data)) {
Pred[i]<-getrisk(i)
}
# family IDs in sample
FamID <- unique(proband_sample_data$FamID)
# data frame of predictions and family ids
id_pred <- data.frame(FamID, Pred)
# creating a dataframe with original data and predictions (and limiting to only the probands)
final_proband_data <- left_join(proband_sample_data, id_pred) %>% filter(ID == 50) ## left join them to have a data frame with all the information
# Saving on object in RData format
save(final_proband_data, file = "final_proband_data.RData")
final_proband_data %>%
ggplot() +
geom_histogram(aes(Pred), binwidth = 1)+
labs(title = "Distribution of Breast Cancer Risk Scores of Probands")+
xlab("Risk Score")+
ylab("Count")
final_proband_data %>%
ggplot() +
geom_histogram(aes(Pred))+
labs(title = "Distribution of Breast Cancer Risk Scores of Probands")+
xlab("Risk Score")+
ylab("Count")
final_proband_data %>%
ggplot() +
geom_histogram(aes(Pred), binwidth = 0.01)+
labs(title = "Distribution of Breast Cancer Risk Scores of Probands")+
xlab("Risk Score")+
ylab("Count")
final_proband_data %>%
ggplot() +
geom_histogram(aes(Pred), binwidth = 0.005)+
labs(title = "Distribution of Breast Cancer Risk Scores of Probands")+
xlab("Risk Score")+
ylab("Count")
final_proband_data %>%
ggplot() +
geom_histogram(aes(Pred), binwidth = 0.0025)+
labs(title = "Distribution of Breast Cancer Risk Scores of Probands")+
xlab("Risk Score")+
ylab("Count")
final_proband_data %>%
ggplot() +
geom_histogram(aes(Pred), binwidth = 0.005)+
labs(title = "Distribution of Breast Cancer Risk Scores of Probands")+
xlab("Risk Score")+
ylab("Count")
summary(final_proband_data$Pred)
describe(final_proband_data$Pred)
desc(final_proband_data$Pred)
final_proband_data %>%
ggplot() +
geom_histogram(aes(Pred), binwidth = 0.005)+
labs(title = "Distribution of 10 Year Breast Cancer Risk Scores of Probands")+
xlab("Risk Score")+
ylab("Count")
final_proband_data$Pred
mean(final_proband_data$Pred)
describe(final_proband_data$Pred)
library(Hmisc)
describe(final_proband_data$Pred)
breastcohort %>%
group_by(FamID) %>%
filter(AffectedBreast==1) %>%
summarise(n=n())
final_proband_data %>%
group_by(FamID) %>%
filter(AffectedBreast==1) %>%
summarise(n=n())
final_proband_data
# descriptive analysis of risk prediction results
describe(final_proband_data$Pred)
# creating a dataframe with original data and predictions
final_proband_data <- left_join(proband_sample_data, id_pred)
# descriptive analysis of risk prediction results
describe(final_proband_data$Pred)
# descriptive analysis of risk prediction results
describe(final_proband_data$Pred %>% filter(ID==50))
# descriptive analysis of risk prediction results
describe(final_proband_data %>% filter(ID==50) %>% select(Pred))
?Vectorize
?MakeRelationship
?split
# subset of data needed for MakeRelationship and remaining questions
breastcohort <- breastcohort %>% select(FamID, ID, FatherID, MotherID, Gender, AgeBreast)
MakeRel <- function(ped){
ped <- as.data.frame(ped)
vec <- MakeRelationship(ped = ped[,2:5], counselee.id = 50)
return(rel_deg())
}
RelDeg <- function(rel){
if_else(rel %in% c("4","2","3"),"1",
ifelse(rel %in% c("5","6","7","8","13"),"2",
ifelse(rel %in% c("14","15"),"-1",
ifelse(rel == "1","0","NULL"))))
}
RelDeg <- function(rel){
if_else(rel %in% c("4","2","3"),"1",
ifelse(rel %in% c("5","6","7","8","13"),"2",
ifelse(rel %in% c("14","15"),"-1",
ifelse(rel == "1","0","NULL"))))
}
RelDeg <- Vectorize(RelDeg)
# subset of data needed for MakeRelationship and remaining questions
breastcohort <- breastcohort %>% select(FamID, ID, FatherID, MotherID, Gender, AgeBreast) %>% filter(FamID %in% c("4","5","6"))
# splitting dataset
fam_ids <- as.list(split(breastcohort, breastcohort$FamID))
fam_ids
cl <- makeCluster(detectCores(), type = "FORK")
clusterExport(cl, c("MakeRel", "RelDeg"))
system.time({Relationships <- parApply(cl, fam_ids, FUN=MakeRel)})
stopCluster(cl)
# parallelizing on 20 cores
cl <- makeCluster(detectCores(), type = "FORK")
clusterExport(cl, c("MakeRel", "RelDeg"))
Relationships <- parApply(cl, fam_ids, FUN=MakeRel)
?parApply
MakeRel <- function(ped){
ped <- as.data.frame(ped)
vec <- MakeRelationship(ped = ped[,2:5], counselee.id = 50)
return(rel_deg(vec))
}
# function to convert output of MakeRel to
#  1 = first degree relative
#  2 = second degree relative
# -1 = husband and sibling in law (not blood relatives)
#  0 = counselee (proband)
RelDeg <- function(rel){
if_else(rel %in% c("4","2","3"),"1",
ifelse(rel %in% c("5","6","7","8","13"),"2",
ifelse(rel %in% c("14","15"),"-1",
ifelse(rel == "1","0","NULL"))))
}
RelDeg <- Vectorize(RelDeg)
# splitting dataset
fam_ids <- as.list(split(breastcohort, breastcohort$FamID))
# parallelizing on 20 cores
cl <- makeCluster(detectCores(), type = "FORK")
clusterExport(cl, c("MakeRel", "RelDeg"))
system.time({Relationships <- parApply(cl, fam_ids, FUN=MakeRel)})
# subset of data needed for MakeRelationship and remaining questions
breastcohort <- breastcohort %>% select(FamID, ID, FatherID, MotherID, Gender, AgeBreast) %>% collect() %>% filter(FamID %in% c("4","5","6"))
breastcohort
# subset of data needed for MakeRelationship and remaining questions
breastcohort <- breastcohort %>% select(FamID, ID, FatherID, MotherID, Gender, AgeBreast) %>% filter(FamID %in% c("4","5","6"))
?apply
apply(fam_ids, FUN = MakeRel)
fam_ids <- as.list(split(breastcohort, breastcohort$FamID))
# parallelizing on 20 cores
cl <- makeCluster(detectCores(), type = "FORK")
clusterExport(cl, c("MakeRel", "RelDeg"))
system.time({Relationships <- parSapply(cl, fam_ids, FUN=MakeRel)})
stopCluster(cl)
MakeRel <- function(ped){
ped <- as.data.frame(ped)
vec <- MakeRelationship(ped = ped[,2:5], counselee.id = 50)
return(RelDeg(vec))
}
# function to convert output of MakeRel to
#  1 = first degree relative
#  2 = second degree relative
# -1 = husband and sibling in law (not blood relatives)
#  0 = counselee (proband)
RelDeg <- function(rel){
if_else(rel %in% c("4","2","3"),"1",
ifelse(rel %in% c("5","6","7","8","13"),"2",
ifelse(rel %in% c("14","15"),"-1",
ifelse(rel == "1","0","NULL"))))
}
RelDeg <- Vectorize(RelDeg)
cl <- makeCluster(detectCores(), type = "FORK")
clusterExport(cl, c("MakeRel", "RelDeg"))
system.time({Relationships <- parSapply(cl, fam_ids, FUN=MakeRel)})
stopCluster(cl)
breastcohort <- breastcohort %>% select(FamID, ID, FatherID, MotherID, Gender, AgeBreast)
MakeRel <- function(ped){
ped <- as.data.frame(ped)
vec <- MakeRelationship(ped = ped[,2:5], counselee.id = 50)
return(RelDeg(vec))
}
breastcohort %>%
group_by(FamID) %>%
summarise(n=n()) %>%
ggplot() +
geom_histogram(aes(x=n), binwidth = 5)+
labs(title = "Distribution of Family Size")+
xlab("Number of Family Members")+
ylab("Count")
breastcohort %>%
group_by(FamID) %>%
summarise(n=n()) %>%
ggplot() +
geom_histogram(aes(x=n))+
labs(title = "Distribution of Family Size")+
xlab("Number of Family Members")+
ylab("Count")
library(dplyr)
library(dbplyr)
library(BayesMendel)
library(ggplot2)
library(reticulate)
library(parallel)
library(Hmisc)
d <- load("/Users/ericamoreira/Desktop/Erica_Files/Classes/BST262/breastcohort.RData")
#d <- load ("/n/home04/bst262u1823/breastcohort.RData")
length(unique(breastcohort$FamID))
breastcohort %>%
group_by(FamID) %>%
summarise(n=n()) %>%
ggplot() +
geom_histogram(aes(x=n))+
labs(title = "Distribution of Family Size")+
xlab("Number of Family Members")+
ylab("Count")
breastcohort %>%
group_by(FamID) %>%
summarise(n=n()) %>%
ggplot() +
geom_histogram(aes(x=n), binwidth = 5)+
labs(title = "Distribution of Family Size")+
xlab("Number of Family Members")+
ylab("Count")
breastcohort %>%
group_by(FamID) %>%
filter(AffectedBreast==1) %>%
summarise(n=n()) %>%
ggplot() +
geom_histogram(aes(x=n), binwidth = 0.5)+
labs(title = "Distribution of Number of Relatives with Breast Cancer Within a Family")+
xlab("Number of Relatives")+
ylab("Count")
breastcohort %>%
group_by(FamID) %>%
filter(AffectedBreast==1) %>%
summarise(n=n()) %>%
ggplot() +
geom_histogram(aes(x=n), binwidth = 0.5)+
labs(title = "Distribution of Number of Relatives with Breast Cancer Within a Family")+
xlab("Number of Relatives")+
ylab("Count")
breastcohort %>%
group_by(FamID) %>%
filter(AffectedBreast==1) %>%
summarise(n=n()) %>%
ggplot() +
geom_histogram(aes(x=n), binwidth = 1)+
labs(title = "Distribution of Number of Relatives with Breast Cancer Within a Family")+
xlab("Number of Relatives")+
ylab("Count")
